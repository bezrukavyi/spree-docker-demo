# Объявляем хост и порт upstream сервер. В данном случае APP_NAME заменится на наше server_app, а APP_PORT на 3000, на котором будем запущен сервер приложения Puma.
upstream app {
  server APP_NAME:APP_PORT;
}

# Перенаправить адреса www на версию без www, а также позаботиться о перенаправлениях на HTTPS одновременно
server {
  # Указываем что nginx будет слушать порт 8080 на текущем хосту. APP_VHOST заменится на хост EC2 инстанса на котором будет запущен nginx.
  listen 8080;
  server_name www.APP_VHOST;
  return 301 http://APP_VHOST$request_uri;
}

server {
  # Указываем что nginx будет слушать порт 8080. 'deferred' уменьшает количество формальностей между сервером и клиентом.
  listen 8080 default deferred;
  server_name APP_VHOST;

  # Указываем директории для записи логов
  access_log /var/log/nginx.access.log;
  error_log /var/log/nginx.error.log info;

  # Указываем редирект в случае ошибок 405 и 503
  error_page 405 /405.html;
  error_page 503 /503.html;

  # Устанавливает максимально допустимый размер тела запроса клиента, указанного в поле заголовка запроса «Content-Length»
  client_max_body_size 64M;

  # Указываем время ожидания в сек, в течение которого клиентское соединение keep-alive будет оставаться открытым на стороне сервера.
  keepalive_timeout 10;

  # Путь к статическим ресурсам, который считывается из VOLUME текущего контейнера по маршруту STATIC_PATH.
  root STATIC_PATH;

  # Указываем маршрут для обслуживания статических ресурсов
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  # Указываем доступные методы запросов
  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  # Указываем локации для обсуживания статических файлов ошибки. Internal означет, что данное местоположение может использоваться только для внутренних запросов

  location = /503.html {
    internal;
  }

  location = /405.html {
    internal;
  }


  # Все запросы буду обрабатываться блоком app_proxy объявленным ниже
  location / {
    try_files $uri @app_proxy;
  }

  # Объявляем блок который будет проксировать запросы на созданный вначале документа upstream server с нужныеми заголовками
  location @app_proxy {
    proxy_redirect off;
    proxy_set_header Client-Ip $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    gzip_static on;
    proxy_pass http://app;
  }
}
